// Generated by psc version 0.6.1
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    function Semigroupoid($less$less$less) {
        this["<<<"] = $less$less$less;
    };
    function Show(show) {
        this.show = show;
    };
    function Functor($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    function Apply($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    function Applicative(__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    function Bind($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    function Monad(__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    function Num($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    function Semigroup($less$greater) {
        this["<>"] = $less$greater;
    };
    function showNumberImpl(n) {  return n.toString();};
    function numAdd(n1) {  return function(n2) {    return n1 + n2;  };};
    function numSub(n1) {  return function(n2) {    return n1 - n2;  };};
    function numMul(n1) {  return function(n2) {    return n1 * n2;  };};
    function numDiv(n1) {  return function(n2) {    return n1 / n2;  };};
    function numMod(n1) {  return function(n2) {    return n1 % n2;  };};
    function numNegate(n) {  return -n;};
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$less$less = function (dict) {
        return dict["<<<"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $plus = function (dict) {
        return dict["+"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var semigroupoidArr = new Semigroupoid(function (f) {
        return function (g) {
            return function (x) {
                return f(g(x));
            };
        };
    });
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        "$": $dollar, 
        "+": $plus, 
        "<*>": $less$times$greater, 
        "<<<": $less$less$less, 
        "<>": $less$greater, 
        ">>=": $greater$greater$eq, 
        Applicative: Applicative, 
        Apply: Apply, 
        Bind: Bind, 
        Functor: Functor, 
        Monad: Monad, 
        Num: Num, 
        Semigroup: Semigroup, 
        Semigroupoid: Semigroupoid, 
        Show: Show, 
        ap: ap, 
        liftA1: liftA1, 
        numNumber: numNumber, 
        pure: pure, 
        "return": $$return, 
        semigroupoidArr: semigroupoidArr, 
        show: show, 
        showNumber: showNumber
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function returnE(a) {  return function() {    return a;  };};
    function bindE(a) {  return function(f) {    return function() {      return f(a())();    };  };};
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        applicativeEff: applicativeEff, 
        applyEff: applyEff, 
        bindE: bindE, 
        bindEff: bindEff, 
        functorEff: functorEff, 
        monadEff: monadEff, 
        returnE: returnE
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    function trace(s) {  return function() {    console.log(s);    return {};  };};
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Rx_Observable = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
  function fromArray(xs) {
    return Rx.Observable.fromArray(xs);
  }
  ;
    
  function subscribe(ob) {
    return function(f) {
      return function() {
        return ob.subscribe(function(value) {
          f(value)();
        });
      }
    };
  }
  ;
    
  function combineLatest(f) {
    return function(ob1) {
      return function(ob2) {
        return ob1.combineLatest(ob2, function (x, y) {
          return f(x)(y);
        });
      };
    };
  }
  ;
    
  function concat(x) {
    return function(y) {
      return x.concat(y);
    };
  };
  ;
    var semigroupObservable = new Prelude.Semigroup(concat);
    return {
        combineLatest: combineLatest, 
        concat: concat, 
        fromArray: fromArray, 
        semigroupObservable: semigroupObservable, 
        subscribe: subscribe
    };
})();
var PS = PS || {};
PS.Combinators = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Rx_Observable = PS.Rx_Observable;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var main = function __do() {
        var _6 = Rx_Observable.fromArray([ 1, 2, 3 ]);
        var _5 = Rx_Observable.fromArray([ 4, 5, 6 ]);
        Rx_Observable.subscribe(Prelude["<>"](Rx_Observable.semigroupObservable)(_6)(_5))(Prelude["<<<"](Prelude.semigroupoidArr)(Debug_Trace.trace)(Prelude.show(Prelude.showNumber)))();
        return Rx_Observable.subscribe(Rx_Observable.combineLatest(Prelude["+"](Prelude.numNumber))(_6)(_5))(Prelude["<<<"](Prelude.semigroupoidArr)(Debug_Trace.trace)(Prelude.show(Prelude.showNumber)))();
    };
    return {
        main: main
    };
})();
PS.Combinators.main();
